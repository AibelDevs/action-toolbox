[tool.action]
version = "1.0.0"
# This is only relevant for this repository. Normally you will have a version in your package.json or pyproject.toml

[[tool.docker]]
enabled = false
ref_name = "ImageApp"
image_name = "app-python"
team_name = "python-team"
docker_file = "Dockerfile"
context = "."

# INFO:
#
# For building docker image, set to false if not needed
#
# This expects to find these under github repo secrets
# secrets.CONTAINER_REGISTRY_URL
# secrets.CONTAINER_REGISTRY_USERNAME
# secrets.CONTAINER_REGISTRY_PASSWORD


[[tool.gitops]]
enabled = false
name = "GitopsDeployment"
repo = "ActionTestingX/gitops-ka-test"
file = "cluster_test/nginx-deployment-service.yaml"
kind = "Deployment"
docker_ref = "ImageApp"
image_path = '["spec"]["template"]["spec"]["containers"][0]["image"]'

# INFO:
#
# Updating a gitops with new image version based on github action jobid
# USE ONLY ON TEST!!!
#
# This expects to find these under github repo secrets
# secrets.GITOPS_KEY
# This key needs to be a deploy key with write privileges

[tool.python]
enabled = false
[tool.python.pip]
enabled = false
#pkg_name_override = "ada-py"
# info
#
# If you are uploading your package to public pypi.org you need to set this
# secrets.PYPI_API_TOKEN
#
use_custom_pypi_server = true
# Or if you use a custom pypi server you need to set these
# secrets.CUSTOM_PYPI_URL
# secrets.CUSTOM_PYPI_USERNAME
# secrets.CUSTOM_PYPI_PASSWORD

[tool.python.conda]
enabled = false
#pkg_name_override
recipe_dir = "./conda"
owner = "Krandedev"
use_custom_quetz_server = true
quetz_channel = "test"
#
# info
#
# If you are uploading to public/private anaconda you need to set this
# secrets.CONDA_API_TOKEN
#
# Or if you will use a private QUETZ server you need to set these
# secrets.QUETZ_API_KEY
# secrets.QUETZ_URL

[tool.semantic_release]
version_toml = ["action_config.toml:tool.action.version"]
# Usually you will have a version in your package.json or pyproject.toml. This is only for this repository

# info
#
# This will generate a release  for your project if added
# generate_release_auto.yaml expects to find this under github repo secrets
# secrets.SOURCE_KEY
# This key needs to be a deploy key with write privileges on this source repository where you plan to do release
# PS! do not enable Do not allow bypassing the above settings under branch protection, if you do we can not push

assets = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "chore",
    "feat",
    "fix"
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = true

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.publish]
upload_to_vcs_release = true
