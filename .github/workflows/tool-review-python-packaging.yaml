name: tool-py-packaging-review

on:
  workflow_call:
    inputs:
      python_version:
        description: 'Python version'
        type: string
        required: false
        default: '3.11'
      config_toml_file:
        description: "config file in repo for actions"
        type: string
        required: false
        default: "action_config.toml"
    outputs:
      python_packaging_review_ok:
        description: "Is the python packaging ok"
        value: ${{ jobs.packagingCheck.outputs.python_packaging_review_ok }}
      python_packaging_review_str:
        description: "Body of the comment"
        value: ${{ jobs.packagingCheck.outputs.python_packaging_review_str }}
    secrets:
      CONDA_API_TOKEN:
        required: false
      QUETZ_API_KEY:
        required: false
      QUETZ_URL:
        required: false
      PYPI_API_TOKEN:
        required: false
      CUSTOM_PYPI_USERNAME:
        required: false
      CUSTOM_PYPI_PASSWORD:
        required: false
      CUSTOM_PYPI_URL:
        required: false

jobs:
  packagingCheck:
    name: Review Python Packaging
    runs-on: ubuntu-latest
    outputs:
      python_packaging_review_ok: ${{ steps.python_packaging_review.outputs.python_packaging_review_ok }}
      python_packaging_review_str: ${{ steps.python_packaging_review.outputs.body }}
    steps:
      - name: Checkout git
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml==0.10.2 requests==2.31.0 semver==3.0.1

      - name: Collect pip and conda config
        id: check_python_packaging
        shell: python
        run: |
          import toml
          import semver
          import requests
          import os

          semantic_data = toml.load("${{ inputs.config_toml_file }}")
          pyproject_data = toml.load("pyproject.toml")

          def set_output(name, value):
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                print(f'{name}={value}', file=fh)
          
          def make_semver_compatible(version: str) -> str:
            release_tag = os.environ.get("RELEASE_TAG", "alpha")
            if release_tag in version and "-" not in version:
                version = version.replace(release_tag, f"-{release_tag}")
        
            elif "a" in version and "-" not in version:
                version = version.replace("a", "-alpha.")
        
            return version
          
          def get_latest_version_from_list_of_versions_by_numeric_sorting(versions: list[str]) -> str:
            latest_version = make_semver_compatible(versions[0])
            for ver in versions[1:]:
                semver_compatible = make_semver_compatible(ver)
                if semver.compare(semver_compatible, latest_version) == 1:
                    latest_version = semver_compatible
        
            return latest_version
          
          print(semantic_data)
          print(pyproject_data)
          
          pip_tool = semantic_data["tool"]["pip"]
          conda_tool = semantic_data["tool"]["conda"]
          
          pyproject_name = pyproject_data["project"]["name"]
          project_version = pyproject_data["project"]["version"]
          
          set_output("pyproject_version", project_version)
          set_output("pyproject_name", pyproject_name)
          
          # Make a GET request to pypi and conda URL's to get the latest version
          if pip_tool["enabled"]:
            package_name = pip_tool.get("name_override", pyproject_name)
            use_custom_pypi_server = pip_tool.get("use_custom_pypi_server", False)
            if use_custom_pypi_server:
              pypi_url = os.getenv("PYPI_URL")
              set_output("uses_custom_pypi_server", 'true')
              # Add support for reading latest version from custom pypiserver later
              latest_version = "N/A"
            else:
              pypi_url = f"https://pypi.org/pypi/{package_name}/json"
              response = requests.get(pypi_url)
              data = response.json()
              if data.get("releases", None) is not None:
                latest_version = get_latest_version_from_list_of_versions_by_numeric_sorting(list(data["releases"].keys()))
              else:
                latest_version = "N/A"
            
            set_output("uses_pip_packaging", 'true')
            set_output("pip_pkg_name", package_name)
            set_output("pip_version", latest_version)
          else:
            set_output("uses_pip_packaging", 'false')
          
          if conda_tool["enabled"]:
            package_name = conda_tool.get("name_override", pyproject_name)
            uses_quetz_server = conda_tool.get("use_custom_quetz_server", False)
            if uses_quetz_server:
              quetz_url = os.getenv("QUETZ_URL")
              set_output("uses_custom_quetz_server", 'true')
              # Add support for reading latest version from custom quetz server later
              latest_conda_version = "N/A"
            else:
              owner = conda_tool['owner']
              conda_url = f"https://api.anaconda.org/package/{owner}/{package_name}"
              response = requests.get(conda_url)
              data = response.json()
              if data.get("files", None) is not None:
                versions = [file["version"] for file in data["files"]]
                latest_conda_version = get_latest_version_from_list_of_versions_by_numeric_sorting(versions)
              else:
                latest_conda_version = "N/A"
            
            set_output("conda_pkg_name", package_name)
            set_output("conda_version", latest_conda_version)
            set_output("uses_conda_packaging", 'true')
          else:
            set_output("uses_conda_packaging", 'false')
          
          # Todo: should compare current pyproject.toml version with latest version(s) from pypi and anaconda

      - name: Check presence of API keys
        id: check_api_keys
        run: |
          if [ -z "${{ secrets.CONDA_API_TOKEN }}" ]; then
            echo "CONDA_API_TOKEN is not set as a secret"
            echo "has_conda_api_key=false" >> $GITHUB_OUTPUT
          else
            echo "has_conda_api_key=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "${{ secrets.PYPI_API_TOKEN }}" ]; then
            echo "PYPI_API_TOKEN is not set as a secret"
            echo "has_pypi_api_key=false" >> $GITHUB_OUTPUT
          else
            echo "has_pypi_api_key=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "${{ secrets.CUSTOM_PYPI_USERNAME }}" ]; then
              echo "CUSTOM_PYPI_USERNAME is not set as a secret"
              echo "has_custom_pypi_username=false" >> $GITHUB_OUTPUT
          else
              echo "has_custom_pypi_username=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "${{ secrets.CUSTOM_PYPI_PASSWORD }}" ]; then
              echo "CUSTOM_PYPI_PASSWORD is not set as a secret"
              echo "has_custom_pypi_password=false" >> $GITHUB_OUTPUT
          else
              echo "has_custom_pypi_password=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "${{ secrets.CUSTOM_PYPI_URL }}" ]; then
              echo "CUSTOM_PYPI_URL is not set as a secret"
              echo "has_custom_pypi_url=false" >> $GITHUB_OUTPUT
          else
              echo "has_custom_pypi_url=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "${{ secrets.QUETZ_API_KEY }}" ]; then
              echo "QUETZ_API_KEY is not set as a secret"
              echo "has_quetz_api_key=false" >> $GITHUB_OUTPUT
          else
              echo "has_quetz_api_key=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "${{ secrets.QUETZ_URL }}" ]; then
              echo "QUETZ_URL is not set as a secret"
              echo "has_quetz_url=false" >> $GITHUB_OUTPUT
          else
              echo "has_quetz_url=true" >> $GITHUB_OUTPUT
          fi

      - name: Review python packaging and create body for comment
        id: python_packaging_review   # Set an ID for this step to reference its outputs
        shell: python
        run: |
          import os
          import base64

          def set_output(name, value, encode_it=False):
            if encode_it:
              value = base64.b64encode(value.encode('utf-8')).decode('utf-8')
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                print(f'{name}={value}', file=fh)

          # Python packaging results
          pip_pkg_name_str = '${{ steps.check_python_packaging.outputs.pip_pkg_name }}'
          conda_pkg_name_str = '${{ steps.check_python_packaging.outputs.conda_pkg_name }}'
          pip_version_str = '${{ steps.check_python_packaging.outputs.pip_version }}'
          conda_version_str = '${{ steps.check_python_packaging.outputs.conda_version }}'
          pyproject_version_str = '${{ steps.check_python_packaging.outputs.pyproject_version }}'
          pyproject_name_str = '${{ steps.check_python_packaging.outputs.pyproject_name }}'

          # Convert the string values to booleans
          uses_conda_packaging = '${{ steps.check_python_packaging.outputs.uses_conda_packaging }}' == 'true'
          uses_pip_packaging = '${{ steps.check_python_packaging.outputs.uses_pip_packaging }}' == 'true'
          uses_custom_pypi_server = '${{ steps.check_python_packaging.outputs.uses_custom_pypi_server }}' == 'true'
          uses_quetz_server = '${{ steps.check_python_packaging.outputs.uses_custom_quetz_server }}' == 'true'
          
          # check if all_checks are true
          all_checks = []
          header = "\n\nPython Packaging results:\n\n"
          
          secrets_review_str = ""
          
          if uses_conda_packaging:
            # check if secret is set
            
            if uses_quetz_server:
              has_quetz_api_key = '${{ steps.check_api_keys.outputs.has_quetz_api_key }}' == 'true'
              has_quetz_url = '${{ steps.check_api_keys.outputs.has_quetz_url }}' == 'true'
              if has_quetz_api_key is False:
                secrets_review_str += "\n* ❌ I did not find the QUETZ_API_KEY secret."
              else:
                secrets_review_str += "\n* ✅ I found the QUETZ_API_KEY secret."
          
              if has_quetz_url is False:
                secrets_review_str += "\n* ❌ I did not find the QUETZ_URL secret."
              else:
                secrets_review_str += "\n* ✅ I found the QUETZ_URL secret."
          
              all_checks.extend([has_quetz_api_key, has_quetz_url])
            else:
              has_conda_api_token = '${{ steps.check_api_keys.outputs.has_conda_api_key }}' == 'true'
              if has_conda_api_token is False:
                  secrets_review_str += "\n* ❌ I did not find the CONDA_API_TOKEN secret."
              else:
                  secrets_review_str += "\n* ✅ I found the CONDA_API_TOKEN secret."
              all_checks.append(has_conda_api_token)

          if uses_pip_packaging:
            # check if secret is set
            has_pypi_api_token = '${{ steps.check_api_keys.outputs.has_pypi_api_key }}' == 'true'
            has_custom_pypi_username = '${{ steps.check_api_keys.outputs.has_custom_pypi_username }}' == 'true'
            has_custom_pypi_password = '${{ steps.check_api_keys.outputs.has_custom_pypi_password }}' == 'true'
            has_custom_pypi_url = '${{ steps.check_api_keys.outputs.has_custom_pypi_url }}' == 'true'
            if uses_custom_pypi_server:
              if has_custom_pypi_username is False:
                secrets_review_str += "\n* ❌ I did not find the CUSTOM_PYPI_USERNAME secret."
              else:
                secrets_review_str += "\n* ✅ I found the CUSTOM_PYPI_USERNAME secret."
          
              if has_custom_pypi_password is False:
                secrets_review_str += "\n* ❌ I did not find the CUSTOM_PYPI_PASSWORD secret."
              else:
                secrets_review_str += "\n* ✅ I found the CUSTOM_PYPI_PASSWORD secret."
          
              if has_custom_pypi_url is False:
                secrets_review_str += "\n* ❌ I did not find the CUSTOM_PYPI_URL secret."
              else:
                secrets_review_str += "\n* ✅ I found the CUSTOM_PYPI_URL secret."
          
              all_checks.extend([has_custom_pypi_username, has_custom_pypi_password, has_custom_pypi_url])
            else:
              if has_pypi_api_token is False:
                secrets_review_str += "\n* ❌ I did not find the PYPI_API_TOKEN secret."
              else:
                secrets_review_str += "\n* ✅ I found the PYPI_API_TOKEN secret."
              all_checks.append(has_pypi_api_token)
              

          # Python package versions
          version_review_str = "\n\n"
          if uses_conda_packaging is True or uses_pip_packaging is True:
            
            version_review_str += "| Packaging Type | Package Name | Version | \n"
            version_review_str += "|----------------|--------------|---------| \n"

            version_review_str += f"| pyproject.toml | {pyproject_name_str} | {pyproject_version_str} |\n"

          if uses_conda_packaging:
            if uses_quetz_server:
              version_review_str += f"| Quetz | {conda_pkg_name_str} | {conda_version_str} | \n"
            else:
              version_review_str += f"| Conda | {conda_pkg_name_str} | {conda_version_str} | \n"

          if uses_pip_packaging:
            if uses_custom_pypi_server is False:
              version_review_str += f"| pypi | {pip_pkg_name_str} | {pip_version_str} | \n"
            else:
              version_review_str += f"| custom pypi | {pip_pkg_name_str} | {pip_version_str} | \n"
          
          if all(all_checks):
            set_output('python_packaging_review_ok', 'true')
          else:
            set_output('python_packaging_review_ok', 'false')
          
          body = header + secrets_review_str + version_review_str
          
          # Set the output
          set_output('body', body, True)
          print(body)