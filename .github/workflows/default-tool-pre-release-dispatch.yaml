name: Default Issue pre-release

on:
  workflow_call:
    inputs:
      release_pypi:
        description: 'Issue Pre-Release to PyPI'
        required: false
        type: string
        default: false
      release_conda:
        description: 'Issue Pre-Release to conda'
        required: false
        type: string
        default: false
      release_docker:
        description: 'Issue Pre-Release to docker'
        required: false
        type: string
        default: false
      release_gitops:
        description: 'Issue Pre-Release to gitops'
        required: false
        type: string
        default: false
      pre_release_level:
        description: 'Pre-release level'
        required: false
        type: string
        default: "patch"
    secrets:
      SOURCE_KEY:
        required: false
      CONDA_API_TOKEN:
        required: false
      PYPI_API_TOKEN:
        required: false
      CUSTOM_PYPI_USERNAME:
        required: false
      CUSTOM_PYPI_PASSWORD:
        required: false
      CUSTOM_PYPI_URL:
        required: false
      QUETZ_API_KEY:
        required: false
      QUETZ_URL:
        required: false
      CONTAINER_REGISTRY_URL:
        required: false
      CONTAINER_REGISTRY_USERNAME:
        required: false
      CONTAINER_REGISTRY_PASSWORD:
        required: false
      GITOPS_KEY:
        required: false

permissions:
  id-token: write
  contents: write
  pull-requests: read

jobs:
  load-config:
    uses: ./.github/workflows/tool-load-config.yaml

  # Add a step to create a patch version "next.run_id"
  bump_version:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.get_current_version.outputs.current_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetches all history for all branches and tags

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver==3.0.2

      - name: Create "next" version
        id: get_current_version
        shell: python
        run: |
          import os
          import re
          import semver

          def set_output(name, value):
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                print(f'{name}={value}', file=fh)

          # get all tags and filter for semver format with prefix 'v'
          all_tags = os.popen('git tag').read().splitlines()
          semver_tags = [tag for tag in all_tags if re.match(r'^v\d+\.\d+\.\d+$', tag)]
          if semver_tags:
              # get the latest semver tag
              semver_tags.sort(key=lambda s: list(map(int, s[1:].split('.'))), reverse=True)
              latest_semver_tag = semver_tags[0]
          else:
              latest_semver_tag = 'v0.0.0'  # default if no semver tags found

          print(f"{latest_semver_tag=}")

          # strip 'v' from the tag
          tag_release = latest_semver_tag[1:]
          
          
          # Bump version according to input.pre_release_level
          input_release_level = "${{ inputs.pre_release_level }}"
          ver = semver.VersionInfo.parse(tag_release)
          if input_release_level == "patch":
            ver = ver.bump_patch()
          elif input_release_level == "minor":
            ver = ver.bump_minor()
          elif input_release_level == "major":
            ver = ver.bump_major()
          elif input_release_level == "rebuild":
            pass
          else:
            print(f"Unknown pre_release_level: {input_release_level}")
            exit(1)
          
          tag_release = str(ver)
          
          # add a pre-release "version-next.build_id" to the latest tagged release
          build_id = os.getenv('GITHUB_RUN_NUMBER')
          print(f"{build_id=}")

          # concatenate the version and build_id (if pre-release)

          current_version = tag_release
          if input_release_level != "rebuild":
            current_version += f"-next.{build_id}"

          print(current_version)
          set_output('current_version', current_version)

  release_pypi:
    if: ${{ github.event.inputs.release_pypi == 'true' }}
    needs: [ load-config, bump_version ]
    uses: ./.github/workflows/tool-release-pip.yaml
    with:
      use_custom_pypi: ${{ needs.load-config.outputs.custom_pypi_server }}
      version_override: ${{ needs.bump_version.outputs.current_version }}
    secrets:
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      CUSTOM_PYPI_USERNAME: ${{ secrets.CUSTOM_PYPI_USERNAME }}
      CUSTOM_PYPI_PASSWORD: ${{ secrets.CUSTOM_PYPI_PASSWORD }}
      CUSTOM_PYPI_URL: ${{ secrets.CUSTOM_PYPI_URL }}

  release_conda:
    if: ${{ github.event.inputs.release_conda == 'true' }}
    needs: [ load-config, bump_version ]
    uses: ./.github/workflows/tool-release-conda.yaml
    with:
      use_quetz_server: ${{ needs.load-config.outputs.custom_quetz_server }}
      use_anaconda_server: ${{ needs.load-config.outputs.anaconda_server }}
      push_conda: "true"
      version_override: ${{ needs.bump_version.outputs.current_version }}
      config_toml_data: ${{ needs.load-config.outputs.config_toml_data }}
    secrets:
      CONDA_API_TOKEN: ${{ secrets.CONDA_API_TOKEN }}
      QUETZ_API_KEY: ${{ secrets.QUETZ_API_KEY }}
      QUETZ_URL: ${{ secrets.QUETZ_URL }}

  release_docker:
    if: ${{ github.event.inputs.release_docker == 'true' }}
    needs: [bump_version, load-config ]
    uses: ./.github/workflows/tool-release-docker.yaml
    with:
      docker_tag_override: ${{ needs.bump_version.outputs.current_version }}
      docker_matrix: ${{ needs.load-config.outputs.docker_matrix }}
      push_docker: "true"
    secrets:
      CONTAINER_REGISTRY_URL: ${{ secrets.CONTAINER_REGISTRY_URL }}
      CONTAINER_REGISTRY_USERNAME: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
      CONTAINER_REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

  release_gitops:
    if: ${{ github.event.inputs.release_gitops == 'true' }}
    needs: [ bump_version, release_docker, load-config ]
    uses: ./.github/workflows/tool-release-gitops-update.yaml
    with:
      push_commit: "true"
      docker_matrix: ${{ needs.load-config.outputs.docker_matrix }}
      gitops_matrix: ${{ needs.load-config.outputs.gitops_matrix }}
      release_tag_override: ${{ needs.bump_version.outputs.current_version }}
    secrets:
      CONTAINER_REGISTRY_URL: ${{ secrets.CONTAINER_REGISTRY_URL }}
      GITOPS_KEY: ${{ secrets.GITOPS_KEY }}