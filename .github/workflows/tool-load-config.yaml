name: Load toml config

on:
  workflow_call:
    inputs:
      python_version:
        description: 'Python version'
        type: string
        required: false
        default: '3.11'
      config_toml_file:
        description: "config file in repo for actions"
        type: string
        required: false
        default: "action_config_test.toml"
      pyproject_toml_file:
        description: "pyproject config file in repo for python"
        type: string
        required: false
        default: "pyproject.toml"
      branch:
        description: "pr branch"
        type: string
    outputs:
      docker_enabled:
        description: 'Is docker enabled'
        value: ${{ jobs.config.outputs.docker_enabled }}
      gitops_enabled:
        description: 'Is gitops enabled'
        value: ${{ jobs.config.outputs.gitops_enabled }}
      python_enabled:
        description: 'Is python enabled'
        value: ${{ jobs.config.outputs.python_enabled }}
      pip_enabled:
        description: 'Is pip enabled'
        value: ${{ jobs.config.outputs.pip_enabled }}
      conda_enabled:
        description: 'Is conda enabled'
        value: ${{ jobs.config.outputs.conda_enabled }}
      config_toml_data:
        description: 'toml data'
        value: ${{ jobs.config.outputs.toml_data }}
      custom_pypi_server:
        description: 'Use a custom pypi server'
        value: ${{ jobs.config.outputs.custom_pypi_server }}
      custom_quetz_server:
        description: 'Use a custom quetz server'
        value: ${{ jobs.config.outputs.custom_quetz_server }}
      anaconda_server:
        description: 'Use anaconda server'
        value: ${{ jobs.config.outputs.anaconda_server }}
      docker_matrix:
        description: 'docker matrix'
        value: ${{ jobs.config.outputs.docker_matrix }}
      gitops_matrix:
        description: 'gitops matrix'
        value: ${{ jobs.config.outputs.gitops_matrix }}


jobs:
  config:
    name: Load toml config "${{ inputs.config_toml_file }}"
    runs-on: ubuntu-latest
    outputs:
      docker_enabled: ${{ steps.config.outputs.docker_enabled }}
      gitops_enabled: ${{ steps.config.outputs.gitops_enabled }}
      python_enabled: ${{ steps.config.outputs.python_enabled }}
      pip_enabled: ${{ steps.config.outputs.pip_enabled }}
      conda_enabled: ${{ steps.config.outputs.conda_enabled }}
      toml_data: ${{ steps.config.outputs.toml_data }}
      custom_pypi_server: ${{ steps.config.outputs.custom_pypi_server }}
      custom_quetz_server: ${{ steps.config.outputs.custom_quetz_server }}
      anaconda_server: ${{ steps.config.outputs.anaconda_server }}
      docker_matrix: ${{ steps.config.outputs.docker_matrix }}
      gitops_matrix: ${{ steps.config.outputs.gitops_matrix }}
    steps:
      - name: Checkout PR or branch push origin
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml=="0.10.2"

      - name: Assign config toml file value
        run: |
          echo ${{ inputs.branch }}
          if ${{ inputs.branch == 'test' }}; then
            echo "inside test branch"
            ${{ inputs.config_toml_file }} ="action_config_test.toml"
          elif ${{ inputs.branch == 'main' || inputs.branch == 'master' }}; then
            echo "inside main branch"
            ${{ inputs.config_toml_file }} ="action_config.toml"
          fi 

      - name: Collect config toml
        env:
          CONFIG_TOML_FILE: ${{ inputs.config_toml_file }}
          PYPROJECT_TOML_FILE: ${{ inputs.pyproject_toml_file }}
        id: config  # Set an ID for this step to reference its outputs
        shell: python
        run: |
          import os
          import base64
          import toml
          import json
          
          def set_output(name, value, encode_it=False):
              if isinstance(value, bool):
                  value = str(value).lower()
              if encode_it:
                  value = base64.b64encode(value.encode('utf-8')).decode('utf-8')
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'{name}={value}', file=fh)
          
          data = toml.load(os.getenv("CONFIG_TOML_FILE"))
          set_output("toml_data", json.dumps(data), True)
          
          # Docker
          docker_config_list = data["tool"].get("docker", [])
          docker_enabled = False
          for docker_config in docker_config_list:
              if docker_config["enabled"]:
                  docker_enabled = True
                  break
          
          set_output("docker_enabled", docker_enabled)
          
          # I cannot pass a list to the github actions matrix, so I have to convert the list to a dict
          set_output("docker_matrix", json.dumps({'docker': docker_config_list}))
          
          
          # GitOps
          gitops_config_list = data["tool"].get("gitops", [])
          gitops_enabled = False
          for gitops_config in gitops_config_list:
              if gitops_config["enabled"]:
                  gitops_enabled = True
                  break
          
          set_output("gitops_enabled", gitops_enabled)
          
          # I cannot pass a list to the github actions matrix, so I have to convert the list to a dict
          set_output("gitops_matrix", json.dumps({'gitops': gitops_config_list}))
          
          
          # Python
          py_tool = data["tool"].get("python", dict(enabled=False))
          python_enabled = py_tool.get("enabled", False)
          set_output("python_enabled", python_enabled)
          
          if python_enabled:
            pip_tool = py_tool.get("pip", dict(enabled=False))
            pip_enabled = pip_tool.get("enabled", False)
            set_output("pip_enabled", pip_enabled)
          
            if pip_enabled:
              custom_pypi_server = pip_tool.get("use_custom_pypi_server", False)
              set_output("custom_pypi_server", custom_pypi_server)
          
            conda_tool = py_tool.get("conda", dict(enabled=False))
            conda_enabled = conda_tool.get("enabled", False)
            set_output("conda_enabled", conda_enabled)
          
            if conda_enabled:
              custom_quetz_server = conda_tool.get("use_custom_quetz_server", False)
              set_output("custom_quetz_server", custom_quetz_server)
          
              anaconda_server = conda_tool.get("use_anaconda_server", False)
              set_output("anaconda_server", anaconda_server)
          
          print(data)