name: tool-pylint

on:
  workflow_call:
    inputs:
      python_version:
        description: 'Python version'
        type: string
        required: false
        default: '3.11'
      use_pylint:
        description: 'Use pylint'
        type: boolean
        required: false
        default: true
    outputs:
      pylint_review_ok:
        description: 'Is the PR ok'
        value: ${{ jobs.lintCheck.outputs.pylint_review_ok }}
      pylint_review_str:
        description: 'Body of the comment'
        value: ${{ jobs.lintCheck.outputs.pylint_review_str }}

jobs:
  lintCheck:
    name: Python Linting Check
    runs-on: ubuntu-latest
    outputs:
      pylint_review_ok: ${{ steps.python_review.outputs.pylint_review_ok }}
      pylint_review_str: ${{ steps.python_review.outputs.body }}
    steps:
      - name: Checkout git
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint==3.0.0 isort==5.12.0 black==23.10.0 ruff==0.1.0
          # This is needed to let pylint find the dependencies
          pip install -r requirements.txt 

      - name: Pylint Analysis
        if: ${{ inputs.use_pylint }}
        id: pylint
        run: |
          if pylint $(git ls-files '*.py'); then
            echo "pylint_result=true" >> $GITHUB_OUTPUT
          else
            echo "pylint_result=false" >> $GITHUB_OUTPUT
          fi

      - name: Isort Check
        id: isort
        run: |
          if isort . --check; then
            echo "isort_result=true" >> $GITHUB_OUTPUT
          else
            echo "isort_result=false" >> $GITHUB_OUTPUT
          fi

      - name: Black Formatting Check
        id: black
        run: |
          if black ./src --config pyproject.toml --check; then
            echo "black_result=true" >> $GITHUB_OUTPUT
          else
            echo "black_result=false" >> $GITHUB_OUTPUT
          fi

      - name: Ruff Check
        id: ruff
        run: |
          if ruff ./src --no-fix; then
            echo "ruff_result=true" >> $GITHUB_OUTPUT
          else
            echo "ruff_result=false" >> $GITHUB_OUTPUT
          fi

      - name: Review python config and create body for comment
        id: python_review  # Set an ID for this step to reference its outputs
        shell: python
        run: |
          import os
          import base64
          
          def set_output(name, value, encode_it=False):
            if encode_it:
              value = base64.b64encode(value.encode('utf-8')).decode('utf-8')
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                print(f'{name}={value}', file=fh)
          
          def deserialize_str(s):
            return base64.b64decode(s).decode('utf-8')
                    
          # Python lint results         
          pylint_result = '${{ steps.pylint.outputs.pylint_result }}' == 'true'
          isort_result = '${{ steps.isort.outputs.isort_result }}' == 'true'
          black_result = '${{ steps.black.outputs.black_result }}' == 'true'
          ruff_result = '${{ steps.ruff.outputs.ruff_result }}' == 'true'
          
          all_checks = [isort_result, black_result, ruff_result]
          if "${{ inputs.use_pylint }}" == "true":
            all_checks.append(pylint_result)
          
          if all(all_checks):
            set_output('pylint_review_ok', 'true')
          else:
            set_output('pylint_review_ok', 'false')
          
          body = "\n\nPython Linting results:\n\n"
          if "${{ inputs.use_pylint }}" == "true":
            body += "\n* ✅ Pylint" if pylint_result else "\n* ❌ Pylint"
          
          body += "\n* ✅ Isort" if isort_result else "\n* ❌ Isort"
          body += "\n* ✅ Black" if black_result else "\n* ❌ Black"
          body += "\n* ✅ Ruff" if ruff_result else "\n* ❌ Ruff"
          
          # Set the output
          set_output('body', body, True)
          print(body)
