name: tool-release-pip

on:
  workflow_call:
    inputs:
      python_version:
        description: 'Python version'
        type: string
        required: false
        default: '3.11'
      use_custom_pypi:
        description: 'Use custom pypi'
        type: string
        required: false
        default: 'false'
      version_override:
        description: 'Version override'
        type: string
        required: false
        default: ''
    secrets:
      PYPI_API_TOKEN:
        required: false
      CUSTOM_PYPI_USERNAME:
        required: false
      CUSTOM_PYPI_PASSWORD:
        required: false
      CUSTOM_PYPI_URL:
        required: false

jobs:
  pypi:
    name: Publish to PYPI
    defaults:
      run:
        shell: bash -l {0}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install build==1.0.3 twine==4.0.2 toml==0.10.2

      - name: Override version
        if: ${{ inputs.version_override != '' }}
        env:
          VERSION_OVERRIDE: ${{ inputs.version_override }}
        shell: python
        run: |
          import os
          import pathlib
          import toml
          
          def set_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'{name}={value}', file=fh)
          
          pyproject_toml_file = list(pathlib.Path('').rglob('pyproject.toml'))[0]
          
          with open(pyproject_toml_file) as fh:
              pyproject_toml = toml.load(fh)
          
          version_override = os.getenv('VERSION_OVERRIDE')
          if 'next' in version_override:
              # replace next. with next to comply with PEP440
              version_override = version_override.replace('next.', 'dev')
          
          pyproject_toml['project']['version'] = version_override
          
          with open(pyproject_toml_file, 'w') as fh:
              toml.dump(pyproject_toml, fh)
          

      - name: Build package
        shell: bash -l {0}
        run: |
          python -m build

      - name: Publish a Python distribution to PyPI
        if: ${{ inputs.use_custom_pypi == 'false' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish a Python distribution to custom PyPI
        if: ${{ inputs.use_custom_pypi == 'true' }}
        run: |
          twine upload --repository-url ${{ secrets.CUSTOM_PYPI_URL }} dist/*
        env:
          TWINE_USERNAME: ${{ secrets.CUSTOM_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.CUSTOM_PYPI_PASSWORD }}
