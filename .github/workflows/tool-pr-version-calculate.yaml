# A tool to ensure that the pull requests is correctly formatted for changelog and semantic release
name: tool-pr-version-calculate

on:
  workflow_call:
    inputs:
      python_version:
        description: "Python version"
        type: string
        required: false
        default: "3.11"
      config_toml_data:
        description: "Toml config file data for actions base64 encoded"
        type: string
        required: false
        default: ""
      config_toml_file:
        description: "config file in repo for actions"
        type: string
        required: false
        default: "action_config.toml"
    outputs:
      calculated_version:
        description: "Calculated version"
        value: ${{ jobs.version_calc.outputs.calculated_version }}
      release_override_found:
        description: "Release override found"
        value: ${{ jobs.version_calc.outputs.release_override_found }}
      is_release:
        description: "Is set to 'true' if its a release"
        value: ${{ jobs.version_calc.outputs.is_release }}
      issue_str:
        description: "Issue string"
        value: ${{ jobs.version_calc.outputs.issue_str }}
    secrets:
      SOURCE_KEY:
        required: false

permissions:
  pull-requests: read
  contents: read

jobs:
  version_calc:
    name: Calculate semantic release version
    runs-on: ubuntu-latest
    outputs:
      calculated_version: ${{ steps.calculate_version.outputs.new_version }}
      release_override_found: ${{ steps.calculate_version.outputs.release_override_found }}
      is_release: ${{ steps.calculate_version.outputs.is_release }}
      issue_str: ${{ steps.calculate_version.outputs.issue_str }}
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }} # we don't need the PR head sha, we need the base sha to calculate the next version
          fetch-depth: 0

      - name: Add current title as commit for semantic release calculation
        if: ${{ github.event_name == 'pull_request_target' }} # only run if it's a PR target
        run: |
          git config --global user.email "dummy@dummy.com"
          git config --global user.name "dummy"
          git commit --allow-empty -m "${{ github.event.pull_request.title }}"

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml==0.10.2 python-semantic-release==8.5.1

      - name: Get latest release tag
        shell: python
        run: |
          import os
          import re

          def set_env(name, value):
            with open(os.environ['GITHUB_ENV'], 'a') as fh:
                print(f'{name}={value}', file=fh)

          # get all tags and filter for semver format with prefix 'v'
          all_tags = os.popen('git tag').read().splitlines()
          semver_tags = [tag for tag in all_tags if re.match(r'^v\d+\.\d+\.\d+$', tag)]
          if semver_tags:
              latest_semver_tag = semver_tags[-1]
          else:
              latest_semver_tag = 'v0.0.0'  # default if no semver tags found
          
          set_env("LATEST_RELEASE_TAG", latest_semver_tag)

      - name: Check the calculated version from semantic release
        shell: python
        id: calculate_version
        env:
          LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
          TOML_FILE: ${{ inputs.config_toml_file }}
        run: |
          import subprocess
          import os
          import json

          def set_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'r') as fh:
                  data = fh.read().strip()
              with open(os.environ['GITHUB_OUTPUT'], 'w') as fh:
                  data += f"\n{name}={value}\n"    
                  fh.write(data)
          
          label_names = json.loads(os.environ["LABELS"])
          rel_labels = {l for l in label_names if l.startswith("release-")}
          if len(rel_labels) == 0:
              rel_labels.add("release-skip")
      
          # Command to execute
          command = ["semantic-release", "--config", os.getenv("TOML_FILE"), "--noop", "version"]
      
          # verify labels and only run version calculation if its a release
          # if skip we do not return any version/set is_release to true
          # if more then one label we do not return any version//set is_release to true
      
          release_label_map = {
              "release-skip": "",
              "release-auto": "",
              "release-patch": "--patch",
              "release-minor": "--minor",
              "release-major": "--major",
          }
      
          valid_labels = set(release_label_map.keys())
          release_labels = valid_labels.intersection(rel_labels)
          num_release_labels_found = len(release_labels) 
          if num_release_labels_found != 1:
              print("Multiple release labels found, please only use one release label")
              # exit, if multiple is set, then something is wrong and we really do not want to do any release
              set_output("issue_str", "Multiple release labels found, please only use one release label")
              exit(1)
      
          release_label = list(rel_labels)[0]
          forced_release = release_label_map[release_label]
          latest_release_tag = os.getenv("LATEST_RELEASE_TAG")
      
          # temp debug..
          print(f"{rel_labels=}")
          print(f"{num_release_labels_found=}")
          print(f"{release_label=}")
          print(f"{forced_release=}")
          print(f"{latest_release_tag=}")
      
          if release_label == "release-skip":
              # exit if skip release
              exit(0)
      
          if forced_release != "":
              command.append(forced_release)
      
          # debug print
          print(command)
      
          # Running the command and capturing output
          result = subprocess.run(command, capture_output=True, text=True)
      
          # Extracting the output
          output = result.stdout.strip()
      
          # print any errors
          if result.stderr:
              print(result.stderr)
      
          # The version name should be in the output
          print(f'Captured Version Name: "{output}"')
      
          # Compare current tag with new so we know if its new
      
          cur_version = os.getenv("LATEST_RELEASE_TAG")
          new_version = f"v{output}"
      
          # debug print
          print(f"{cur_version=}")
          print(f"{new_version=}")
      
          if cur_version != new_version:
            print("New version found")
            set_output("new_version", output)
            set_output("release_override_found", forced_release)
            set_output("is_release", "true")
