name: tool-release-docker

on:
  workflow_call:
    inputs:
      push_docker:
        description: 'Push docker image'
        type: string
        required: false
        default: "false"
      docker_use_latest:
        description: 'Push docker image with latest tag'
        type: string
        required: false
        default: false
      docker_tag_override:
        description: 'Override docker tag'
        type: string
        required: false
        default: ''
      create_build_logs:
        description: 'Create build logs (for testing only)'
        type: string
        required: false
        default: false
      python_version:
        description: 'Python version'
        type: string
        required: false
        default: '3.11'
    outputs:
      build_logs_str:
        description: 'Build logs'
        value: ${{ jobs.summarize_build_logs.outputs.build_log_summary }}
    secrets:
      CONTAINER_REGISTRY_URL:
        required: false
      CONTAINER_REGISTRY_USERNAME:
        required: false
      CONTAINER_REGISTRY_PASSWORD:
        required: false

env:
  IS_PRE_RELEASE: 'false'
  BUILD_LOG_DIR: ${{ github.workspace }}

jobs:
  load-config:
    uses: ./.github/workflows/tool-load-config.yaml

  build_docker:
    name: Build Docker "${{ matrix.docker.ref_name }}"
    needs: load-config
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.load-config.outputs.docker_matrix) }}
    steps:
      - name: Checkout git
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install toml==0.10.2

      - name: Check if release override contains "next"
        id: check_release_override
        env:
          INPUT_DOCKER_TAG_OVERRIDE: ${{ inputs.docker_tag_override }}
        shell: python
        run: |
          import os
          
          def set_env(name, value):
            with open(os.environ['GITHUB_ENV'], 'a') as fh:
                print(f'{name}={value}', file=fh)
          
          release_override = os.getenv('INPUT_DOCKER_TAG_OVERRIDE')
          print(f"{release_override=}")
          
          if 'next.' in release_override:
              print("IS_PRE_RELEASE=true")
              set_env('IS_PRE_RELEASE', 'true')
          else:
              print("IS_PRE_RELEASE=false")
              set_env('IS_PRE_RELEASE', 'false')

      - name: Update pyproject.toml and package.json (if exists) on pre-release
        if: env.IS_PRE_RELEASE == 'true'
        shell: python
        run: |
            import os
            import pathlib
            import toml
            import json
            
            def set_env(name, value):
                with open(os.environ['GITHUB_ENV'], 'a') as fh:
                    print(f'{name}={value}', file=fh)
            
            pyproject_tomls = list(pathlib.Path('').rglob('pyproject.toml'))
            package_jsons = list(pathlib.Path('').rglob('package.json'))
            version_override = os.getenv('INPUT_DOCKER_TAG_OVERRIDE')
            print(f"{version_override=}")
            
            # Check if pyproject.toml exists
            if len(pyproject_tomls) > 0:
                print("Found pyproject.toml")
                pyproject_toml = pyproject_tomls[0]
                print(f"{pyproject_toml=}")
                
                # Read pyproject.toml
                with open(pyproject_toml, 'r') as file:
                    toml_data = toml.load(file)
                
                # Update pyproject.toml
              
                # replace next. with next to comply with PEP440
                py_version_override = version_override.replace('-next.', 'dev')
                print(f"{py_version_override=}")
                toml_data['project']['version'] = py_version_override
                
                # Write pyproject.toml
                with open(pyproject_toml, 'w') as file:
                    toml.dump(toml_data, file)
                print(toml_data)
            
            # Check if package.json exists
            if len(package_jsons) > 0:
                print("Found package.json")
                package_json = package_jsons[0]
                print(f"{package_json=}")
                
                # Read package.json
                with open(package_json, 'r') as file:
                    json_data = json.load(file)
                
                # Update package.json
                json_data['version'] = os.getenv('INPUT_DOCKER_TAG_OVERRIDE')
                
                # Write package.json
                with open(package_json, 'w') as file:
                    json.dump(json_data, file)

      - name: Build docker image with ${{ steps.set_release_tag.outputs.docker_tag }} tag
        if: inputs.create_build_logs == 'false'
        run: |
          docker build -f ${{ matrix.docker.context }}/${{ matrix.docker.docker_file }} -t ${{ secrets.CONTAINER_REGISTRY_URL }}/${{ matrix.docker.team_name }}/${{ matrix.docker.image_name }}:${{ inputs.docker_tag_override }} ${{ matrix.docker.context }}

      - name: Build docker image with latest tag
        if: (inputs.docker_use_latest == 'true') || (inputs.create_build_logs == 'true')
        run: |
          docker build -f ${{ matrix.docker.context }}/${{ matrix.docker.docker_file }} -t ${{ secrets.CONTAINER_REGISTRY_URL }}/${{ matrix.docker.team_name }}/${{ matrix.docker.image_name }}:latest ${{ matrix.docker.context }}
          # if inputs.create_build_logs == 'true' then we will echo to file
          if [[ "${{ inputs.create_build_logs }}" == "true" ]]; then
            # Create a file with the build log. File name should have the github action run id in it to avoid collisions
            echo "${{ matrix.docker.ref_name }}" >> build_log_docker_${{ github.run_id }}_${{ matrix.docker.ref_name }}.txt
          fi

      - name: Upload Build Log
        if: inputs.create_build_logs == 'true'
        uses: actions/upload-artifact@v3
        continue-on-error: true # Needed to continue in the event the build fails and no build log is found
        with:
          name: build-log-${{ github.run_id }}
          path: build_log_docker_${{ github.run_id }}_${{ matrix.docker.ref_name }}.txt

      - name: Source - login to ACR
        if: inputs.push_docker == 'true'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Push docker image with ${{ inputs.docker_tag_override }} tag
        if: inputs.push_docker == 'true'
        run: |
          docker push ${{ secrets.CONTAINER_REGISTRY_URL }}/${{ matrix.docker.team_name }}/${{ matrix.docker.image_name }}:${{ inputs.docker_tag_override }}

      - name: Push docker image with latest tag
        if: inputs.docker_use_latest == 'true' && inputs.docker_push == 'true' && env.IS_PRE_RELEASE == 'false'
        run: |
          docker push ${{ secrets.CONTAINER_REGISTRY_URL }}/${{ matrix.docker.team_name }}/${{ matrix.docker.image_name }}:latest

  summarize_build_logs:
    if: inputs.create_build_logs == 'true'
    needs: build_docker
    runs-on: ubuntu-latest
    outputs:
      build_log_summary: ${{ steps.summarize_build_logs.outputs.build_log_summary }}
    steps:
      - name: Download Build Log Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-log-${{ github.run_id }}
          path: ${{ env.BUILD_LOG_DIR }}

      - name: Review Build Logs and
        id: summarize_build_logs  # Set an ID for this step to reference its outputs
        shell: python
        run: |
          import os
          import pathlib
          import base64
          import json

          def set_output(name, value, encode_it=False):
            if encode_it:
              value = base64.b64encode(value.encode('utf-8')).decode('utf-8')
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                print(f'{name}={value}', file=fh)

          # Check if docker build was successful or not
          build_logs = ""
          for p in pathlib.Path(os.environ["BUILD_LOG_DIR"]).glob('build_log_docker_*.txt'):
            with open(p, 'r') as file:
              build_logs += file.read().strip()
              build_logs += ";"
          
          set_output('build_log_summary', build_logs)