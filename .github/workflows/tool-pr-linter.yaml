# A tool to ensure that the pull requests is correctly formatted for changelog and semantic release
name: tool-pr-checker

on:
  workflow_call:
    inputs:
      python_version:
        description: 'Python version'
        type: string
        required: false
        default: '3.11'
    outputs:
      has_source_key_secret:
        description: "Is SOURCE_KEY secret set"
        value: ${{ jobs.lintCheck.outputs.has_source_key_secret }}
      check_pr_title:
        description: "Is PR title correct"
        value: ${{ jobs.lintCheck.outputs.check_pr_title }}
      check_release_label:
        description: "Is release label set"
        value: ${{ jobs.lintCheck.outputs.contains_release_label }}
    secrets:
      SOURCE_KEY:
        required: false

permissions:
  pull-requests: write
  contents: read

jobs:
  lintCheck:
    name: Python Check Pull Request
    runs-on: ubuntu-latest
    outputs:
      has_source_key_secret: ${{ steps.check-source-key.outputs.has_source_key_secret }}
      check_pr_title: ${{ steps.check_pr_title.outputs.check_pr_title }}
      contains_release_label: ${{ steps.check_release_label.outputs.contains_release_label }}
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }} # we don't need the PR head sha, we need the base sha to calculate the next version
          fetch-depth: 0

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python_version }}

      - name: check if SOURCE_KEY is set as a secret
        id: check-source-key
        run: |
          if [ -z "${{ secrets.SOURCE_KEY }}" ]; then
            echo "SOURCE_KEY is not set as a secret"
            echo "has_source_key_secret=false" >> $GITHUB_OUTPUT
          else
            echo "has_source_key_secret=true" >> $GITHUB_OUTPUT
          fi

      - name : Check if PR title is ok
        id: check_pr_title
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        shell: python
        run: |
          import os
          
          pr_title = os.getenv('PR_TITLE')
          valid_pr_title = ['fix: ', 'fix!: ', 'feat: ', 'feat!: ', 'chore: ']
          
          def set_output(name, value):
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                print(f'{name}={value}', file=fh)
          
          if pr_title.startswith(tuple(valid_pr_title)):
            set_output("check_pr_title", "true")
          else:
            set_output("check_pr_title", "false")

      - name: Read PR labels using python
        env:
          LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
        shell: python
        id: check_release_label
        run: |
          import json
          import os
          
          def set_output(name, value):
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                print(f'{name}={value}', file=fh)
          
          def set_env(name, value):
            with open(os.environ['GITHUB_ENV'], 'a') as fh:
                print(f'{name}={value}', file=fh)
          
          label_names = json.loads(os.environ['LABELS'])
          valid_labels = set(['release-auto', 'release-patch', 'release-minor', 'release-major', 'release-skip'])
          
          if len(label_names) == 0:
            set_env("ADD_DEFAULT_LABEL", "true")
            set_output("contains_release_label", "true")
          else:
            if len(valid_labels.intersection(label_names)) == 0:
              set_output("contains_release_label", "false")
            else:
              set_output("contains_release_label", "true")

      - name: Add default labels to selection
        uses: actions/github-script@v7
        with:
          script: |
            // Define your labels with associated colors
            // release -skip is gray, -auto is yellow, -patch is green, -minor is blue, -major is red
            const labelsWithColors = { 
              'release-skip': 'b3b3b3', // Gray
              'release-auto': 'ffff00', // Yellow
              'release-patch': '00ff00', // Green
              'release-minor': '0000ff', // Blue
              'release-major': 'ff0000', // Red
            };
        
            const owner = context.repo.owner;
            const repo = context.repo.repo;
        
            // Function to get all labels in the repository with their colors
            async function getAllLabelsWithColors() {
              let allLabels = [];
              for await (const response of github.paginate.iterator(
                github.rest.issues.listLabelsForRepo,
                {
                  owner: owner,
                  repo: repo
                }
              )) {
                allLabels.push(...response.data.map(label => ({ name: label.name, color: label.color })));
              }
              return allLabels;
            }
        
            // Function to create or update a label in the repository
            async function createOrUpdateLabel(labelName, color) {
              await github.rest.issues.createLabel({
                owner: owner,
                repo: repo,
                name: labelName,
                color: color
              }).catch(async (error) => {
                if (error.status === 422) { // Label already exists, update it
                  await github.rest.issues.updateLabel({
                    owner: owner,
                    repo: repo,
                    name: labelName,
                    color: color
                  });
                } else {
                  throw error;
                }
              });
            }
        
            // Main logic
            async function run() {
              const existingLabels = await getAllLabelsWithColors();
              const existingLabelNames = existingLabels.map(label => label.name);
        
              for (const [labelName, color] of Object.entries(labelsWithColors)) {
                const existingLabel = existingLabels.find(label => label.name === labelName);
                if (!existingLabelNames.includes(labelName) || (existingLabel && existingLabel.color !== color)) {
                  await createOrUpdateLabel(labelName, color);
                }
              }
            }
        
            run();

      - name: If ADD_DEFAULT_LABEL is true, add release-skip label
        if: env.ADD_DEFAULT_LABEL == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['release-skip']
            })